{"version":3,"sources":["pages/MainPage.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","root","fontFamily","marginLeft","marginRight","marginBottom","width","padding","rootResult","textArea","fontSize","titleText","color","textAlign","borderBottom","resultText","button","icon","background","height","MainPage","useState","textField","setText","hash","setHash","classes","Card","className","CardContent","TextField","label","multiline","rows","onChange","event","target","value","variant","CardActions","Button","disableElevation","onClick","axios","post","then","res","data","Typography","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+QAcMA,EAAYC,IAAW,CACzBC,KAAM,CACFC,WAAY,cACZC,WAAY,OACZC,YAAa,OACbC,aAAc,GACdC,MAAO,MACP,yBAA0B,CACtBC,QAAS,KAGjBC,WAAY,CACRN,WAAY,cACZC,WAAY,OACZC,YAAa,OACbE,MAAO,MACP,yBAA0B,CACtBC,QAAS,IAGjBE,SAAU,CACNP,WAAY,cACZQ,SAAU,GACVJ,MAAO,QAEXK,UAAW,CACPC,MAAO,QACPL,QAAS,GACTG,SAAU,GACVG,UAAW,OACXC,aAAc,kBAElBC,WAAY,CACRH,MAAO,QACPL,QAAS,GACTG,SAAU,GACVG,UAAW,QAEfG,OAAQ,CACJV,MAAO,OACPJ,WAAY,eAEhBe,KAAM,CACFC,WAAY,MACZZ,MAAO,OACPa,OAAQ,UAID,SAASC,IAAY,IAAD,EACFC,mBAAS,IADP,mBACxBC,EADwB,KACbC,EADa,OAEPF,mBAAS,IAFF,mBAExBG,EAFwB,KAElBC,EAFkB,KAGzBC,EAAU3B,IAmBhB,OACI,6BACI,kBAAC4B,EAAA,EAAD,CAAMC,UAAWF,EAAQzB,MACrB,kBAAC4B,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAWF,UAAWF,EAAQjB,SACnBsB,MAAM,aACNC,WAAS,EACTC,KAAM,EACNC,SApBN,SAACC,GAClBZ,EAAQY,EAAMC,OAAOC,QAoBEC,QAAQ,cAGvB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIZ,UAAWF,EAAQV,OACnBsB,QAAQ,YAAY1B,MAAM,UAC1B6B,kBAAgB,EAChBC,QAlCJ,SAACP,GACbQ,IAAMC,KAAK,YAAa,CAACP,MAAOf,IAC3BuB,MAAK,SAAAC,GAAG,OAAIrB,EAAQqB,EAAIC,WA4BjB,mBASR,kBAACpB,EAAA,EAAD,CAAMC,UAAWF,EAAQlB,YACrB,kBAACqB,EAAA,EAAD,KACI,kBAACmB,EAAA,EAAD,CAAYpB,UAAWF,EAAQf,UAAWC,MAAM,iBAAgB,sCAChE,kBAACoC,EAAA,EAAD,CAAYpB,UAAWF,EAAQX,WAAYH,MAAM,iBAAgB,2BAAIY,OC3F1EyB,MAff,WACE,OACE,yBAAKrB,UAAU,OACb,gCACI,qDAIJ,8BACI,kBAACR,EAAD,SCDU8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.62175c2c.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport axios from 'axios'\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport AccessAlarmIcon from '@material-ui/icons/AccessAlarm';\r\nimport {IconButton} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        fontFamily: 'Roboto Mono',\r\n        marginLeft: 'auto',\r\n        marginRight: 'auto',\r\n        marginBottom: 16,\r\n        width: '70%',\r\n        '& .MuiCardActions-root': {\r\n            padding: 16\r\n        }\r\n    },\r\n    rootResult: {\r\n        fontFamily: 'Roboto Mono',\r\n        marginLeft: 'auto',\r\n        marginRight: 'auto',\r\n        width: '70%',\r\n        '& .MuiCardContent-root': {\r\n            padding: 0\r\n        }\r\n    },\r\n    textArea: {\r\n        fontFamily: 'Roboto Mono',\r\n        fontSize: 12,\r\n        width: '100%',\r\n    },\r\n    titleText: {\r\n        color: 'black',\r\n        padding: 16,\r\n        fontSize: 14,\r\n        textAlign: 'left',\r\n        borderBottom: '1px solid #ccc'\r\n    },\r\n    resultText: {\r\n        color: 'black',\r\n        padding: 16,\r\n        fontSize: 12,\r\n        textAlign: 'left',\r\n    },\r\n    button: {\r\n        width: '100%',\r\n        fontFamily: 'Roboto Mono',\r\n    },\r\n    icon: {\r\n        background: \"red\",\r\n        width: '36px',\r\n        height: '36px',\r\n    }\r\n});\r\n\r\nexport default function MainPage() {\r\n    const [textField, setText] = useState(\"\");\r\n    const [hash, setHash] = useState(\"\");\r\n    const classes = useStyles();\r\n\r\n    const onClick = (event) => {\r\n        axios.post('/api/hash', {value: textField})\r\n            .then(res => setHash(res.data))\r\n    }\r\n\r\n    const onTextChange = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n\r\n    function icon() {\r\n        return (\r\n            <div className={\"icon\"}>\r\n\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Card className={classes.root}>\r\n                <CardContent>\r\n                    <TextField className={classes.textArea}\r\n                               label=\"Enter data\"\r\n                               multiline\r\n                               rows={4}\r\n                               onChange={onTextChange}\r\n                               variant=\"outlined\"\r\n                    />\r\n                </CardContent>\r\n                <CardActions>\r\n                    <Button\r\n                        className={classes.button}\r\n                        variant=\"contained\" color=\"primary\"\r\n                        disableElevation\r\n                        onClick={onClick}>\r\n                        Generate hash\r\n                    </Button>\r\n                </CardActions>\r\n            </Card>\r\n            <Card className={classes.rootResult}>\r\n                <CardContent>\r\n                    <Typography className={classes.titleText} color=\"textSecondary\"><b>Result</b></Typography>\r\n                    <Typography className={classes.resultText} color=\"textSecondary\"><b>{hash}</b></Typography>\r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport './App.css';\nimport MainPage from \"./pages/MainPage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n          <h2>\n              GENERATE SHA256 HASH\n          </h2>\n      </header>\n      <main>\n          <MainPage/>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}